/*     */ package com.facebook.presto.jdbc.internal.jetty.http2.hpack;
/*     */ 
/*     */ import java.nio.ByteBuffer;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Huffman
/*     */ {
/*  28 */   static final int[][] CODES = { { 8184, 13 }, { 8388568, 23 }, { 268435426, 28 }, { 268435427, 28 }, { 268435428, 28 }, { 268435429, 28 }, { 268435430, 28 }, { 268435431, 28 }, { 268435432, 28 }, { 16777194, 24 }, { 1073741820, 30 }, { 268435433, 28 }, { 268435434, 28 }, { 1073741821, 30 }, { 268435435, 28 }, { 268435436, 28 }, { 268435437, 28 }, { 268435438, 28 }, { 268435439, 28 }, { 268435440, 28 }, { 268435441, 28 }, { 268435442, 28 }, { 1073741822, 30 }, { 268435443, 28 }, { 268435444, 28 }, { 268435445, 28 }, { 268435446, 28 }, { 268435447, 28 }, { 268435448, 28 }, { 268435449, 28 }, { 268435450, 28 }, { 268435451, 28 }, { 20, 6 }, { 1016, 10 }, { 1017, 10 }, { 4090, 12 }, { 8185, 13 }, { 21, 6 }, { 248, 8 }, { 2042, 11 }, { 1018, 10 }, { 1019, 10 }, { 249, 8 }, { 2043, 11 }, { 250, 8 }, { 22, 6 }, { 23, 6 }, { 24, 6 }, { 0, 5 }, { 1, 5 }, { 2, 5 }, { 25, 6 }, { 26, 6 }, { 27, 6 }, { 28, 6 }, { 29, 6 }, { 30, 6 }, { 31, 6 }, { 92, 7 }, { 251, 8 }, { 32764, 15 }, { 32, 6 }, { 4091, 12 }, { 1020, 10 }, { 8186, 13 }, { 33, 6 }, { 93, 7 }, { 94, 7 }, { 95, 7 }, { 96, 7 }, { 97, 7 }, { 98, 7 }, { 99, 7 }, { 100, 7 }, { 101, 7 }, { 102, 7 }, { 103, 7 }, { 104, 7 }, { 105, 7 }, { 106, 7 }, { 107, 7 }, { 108, 7 }, { 109, 7 }, { 110, 7 }, { 111, 7 }, { 112, 7 }, { 113, 7 }, { 114, 7 }, { 252, 8 }, { 115, 7 }, { 253, 8 }, { 8187, 13 }, { 524272, 19 }, { 8188, 13 }, { 16380, 14 }, { 34, 6 }, { 32765, 15 }, { 3, 5 }, { 35, 6 }, { 4, 5 }, { 36, 6 }, { 5, 5 }, { 37, 6 }, { 38, 6 }, { 39, 6 }, { 6, 5 }, { 116, 7 }, { 117, 7 }, { 40, 6 }, { 41, 6 }, { 42, 6 }, { 7, 5 }, { 43, 6 }, { 118, 7 }, { 44, 6 }, { 8, 5 }, { 9, 5 }, { 45, 6 }, { 119, 7 }, { 120, 7 }, { 121, 7 }, { 122, 7 }, { 123, 7 }, { 32766, 15 }, { 2044, 11 }, { 16381, 14 }, { 8189, 13 }, { 268435452, 28 }, { 1048550, 20 }, { 4194258, 22 }, { 1048551, 20 }, { 1048552, 20 }, { 4194259, 22 }, { 4194260, 22 }, { 4194261, 22 }, { 8388569, 23 }, { 4194262, 22 }, { 8388570, 23 }, { 8388571, 23 }, { 8388572, 23 }, { 8388573, 23 }, { 8388574, 23 }, { 16777195, 24 }, { 8388575, 23 }, { 16777196, 24 }, { 16777197, 24 }, { 4194263, 22 }, { 8388576, 23 }, { 16777198, 24 }, { 8388577, 23 }, { 8388578, 23 }, { 8388579, 23 }, { 8388580, 23 }, { 2097116, 21 }, { 4194264, 22 }, { 8388581, 23 }, { 4194265, 22 }, { 8388582, 23 }, { 8388583, 23 }, { 16777199, 24 }, { 4194266, 22 }, { 2097117, 21 }, { 1048553, 20 }, { 4194267, 22 }, { 4194268, 22 }, { 8388584, 23 }, { 8388585, 23 }, { 2097118, 21 }, { 8388586, 23 }, { 4194269, 22 }, { 4194270, 22 }, { 16777200, 24 }, { 2097119, 21 }, { 4194271, 22 }, { 8388587, 23 }, { 8388588, 23 }, { 2097120, 21 }, { 2097121, 21 }, { 4194272, 22 }, { 2097122, 21 }, { 8388589, 23 }, { 4194273, 22 }, { 8388590, 23 }, { 8388591, 23 }, { 1048554, 20 }, { 4194274, 22 }, { 4194275, 22 }, { 4194276, 22 }, { 8388592, 23 }, { 4194277, 22 }, { 4194278, 22 }, { 8388593, 23 }, { 67108832, 26 }, { 67108833, 26 }, { 1048555, 20 }, { 524273, 19 }, { 4194279, 22 }, { 8388594, 23 }, { 4194280, 22 }, { 33554412, 25 }, { 67108834, 26 }, { 67108835, 26 }, { 67108836, 26 }, { 134217694, 27 }, { 134217695, 27 }, { 67108837, 26 }, { 16777201, 24 }, { 33554413, 25 }, { 524274, 19 }, { 2097123, 21 }, { 67108838, 26 }, { 134217696, 27 }, { 134217697, 27 }, { 67108839, 26 }, { 134217698, 27 }, { 16777202, 24 }, { 2097124, 21 }, { 2097125, 21 }, { 67108840, 26 }, { 67108841, 26 }, { 268435453, 28 }, { 134217699, 27 }, { 134217700, 27 }, { 134217701, 27 }, { 1048556, 20 }, { 16777203, 24 }, { 1048557, 20 }, { 2097126, 21 }, { 4194281, 22 }, { 2097127, 21 }, { 2097128, 21 }, { 8388595, 23 }, { 4194282, 22 }, { 4194283, 22 }, { 33554414, 25 }, { 33554415, 25 }, { 16777204, 24 }, { 16777205, 24 }, { 67108842, 26 }, { 8388596, 23 }, { 67108843, 26 }, { 134217702, 27 }, { 67108844, 26 }, { 67108845, 26 }, { 134217703, 27 }, { 134217704, 27 }, { 134217705, 27 }, { 134217706, 27 }, { 134217707, 27 }, { 268435454, 28 }, { 134217708, 27 }, { 134217709, 27 }, { 134217710, 27 }, { 134217711, 27 }, { 134217712, 27 }, { 67108846, 26 }, { 1073741823, 30 } };
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/* 289 */   static final int[][] LCCODES = new int[CODES.length][];
/*     */   
/*     */   static final char[] tree;
/*     */   
/*     */   static final char[] rowsym;
/*     */   
/*     */   static final byte[] rowbits;
/*     */   
/*     */ 
/*     */   static
/*     */   {
/* 300 */     System.arraycopy(CODES, 0, LCCODES, 0, CODES.length);
/* 301 */     for (int i = 65; i <= 90; i++) {
/* 302 */       LCCODES[i] = LCCODES[(97 + i - 65)];
/*     */     }
/* 304 */     int r = 0;
/* 305 */     for (int i = 0; i < CODES.length; i++)
/* 306 */       r += (CODES[i][1] + 7) / 8;
/* 307 */     tree = new char[r * 256];
/* 308 */     rowsym = new char[r];
/* 309 */     rowbits = new byte[r];
/*     */     
/* 311 */     r = 0;
/* 312 */     for (int sym = 0; sym < CODES.length; sym++)
/*     */     {
/* 314 */       int code = CODES[sym][0];
/* 315 */       int len = CODES[sym][1];
/*     */       
/* 317 */       int current = 0;
/*     */       
/* 319 */       while (len > 8)
/*     */       {
/* 321 */         len -= 8;
/* 322 */         int i = code >>> len & 0xFF;
/*     */         
/* 324 */         int t = current * 256 + i;
/* 325 */         current = tree[t];
/* 326 */         if (current == 0)
/*     */         {
/* 328 */           tree[t] = ((char)++r);
/* 329 */           current = r;
/*     */         }
/*     */       }
/*     */       
/* 333 */       r++;int terminal = r;
/* 334 */       rowsym[r] = ((char)sym);
/* 335 */       int b = len & 0x7;
/* 336 */       int terminalBits = b == 0 ? 8 : b;
/*     */       
/* 338 */       rowbits[r] = ((byte)terminalBits);
/* 339 */       int shift = 8 - len;
/* 340 */       int start = current * 256 + (code << shift & 0xFF);
/* 341 */       int end = start + (1 << shift);
/* 342 */       for (int i = start; i < end; i++) {
/* 343 */         tree[i] = ((char)terminal);
/*     */       }
/*     */     }
/*     */   }
/*     */   
/*     */   public static String decode(ByteBuffer buffer) {
/* 349 */     return decode(buffer, buffer.remaining());
/*     */   }
/*     */   
/*     */   public static String decode(ByteBuffer buffer, int length)
/*     */   {
/* 354 */     StringBuilder out = new StringBuilder(length * 2);
/* 355 */     int node = 0;
/* 356 */     int current = 0;
/* 357 */     int bits = 0;
/*     */     
/* 359 */     byte[] array = buffer.array();
/* 360 */     int position = buffer.position();
/* 361 */     int start = buffer.arrayOffset() + position;
/* 362 */     int end = start + length;
/* 363 */     buffer.position(position + length);
/*     */     
/* 365 */     for (int i = start; i < end; i++)
/*     */     {
/* 367 */       int b = array[i] & 0xFF;
/* 368 */       current = current << 8 | b;
/* 369 */       bits += 8;
/* 370 */       while (bits >= 8)
/*     */       {
/* 372 */         int c = current >>> bits - 8 & 0xFF;
/* 373 */         node = tree[(node * 256 + c)];
/* 374 */         if (rowbits[node] != 0)
/*     */         {
/*     */ 
/* 377 */           out.append(rowsym[node]);
/* 378 */           bits -= rowbits[node];
/* 379 */           node = 0;
/*     */ 
/*     */         }
/*     */         else
/*     */         {
/* 384 */           bits -= 8;
/*     */         }
/*     */       }
/*     */     }
/*     */     
/* 389 */     while (bits > 0)
/*     */     {
/* 391 */       int c = current << 8 - bits & 0xFF;
/* 392 */       node = tree[(node * 256 + c)];
/* 393 */       if ((rowbits[node] == 0) || (rowbits[node] > bits)) {
/*     */         break;
/*     */       }
/* 396 */       if (rowbits[node] == 0) {
/* 397 */         throw new IllegalStateException();
/*     */       }
/* 399 */       out.append(rowsym[node]);
/* 400 */       bits -= rowbits[node];
/* 401 */       node = 0;
/*     */     }
/*     */     
/* 404 */     return out.toString();
/*     */   }
/*     */   
/*     */   public static int octetsNeeded(String s)
/*     */   {
/* 409 */     return octetsNeeded(CODES, s);
/*     */   }
/*     */   
/*     */   public static void encode(ByteBuffer buffer, String s)
/*     */   {
/* 414 */     encode(CODES, buffer, s);
/*     */   }
/*     */   
/*     */   public static int octetsNeededLC(String s)
/*     */   {
/* 419 */     return octetsNeeded(LCCODES, s);
/*     */   }
/*     */   
/*     */   public static void encodeLC(ByteBuffer buffer, String s)
/*     */   {
/* 424 */     encode(LCCODES, buffer, s);
/*     */   }
/*     */   
/*     */   private static int octetsNeeded(int[][] table, String s)
/*     */   {
/* 429 */     int needed = 0;
/* 430 */     int len = s.length();
/* 431 */     for (int i = 0; i < len; i++)
/*     */     {
/* 433 */       char c = s.charAt(i);
/* 434 */       if ((c >= '') || (c < ' '))
/* 435 */         throw new IllegalArgumentException();
/* 436 */       needed += table[c][1];
/*     */     }
/*     */     
/* 439 */     return (needed + 7) / 8;
/*     */   }
/*     */   
/*     */   private static void encode(int[][] table, ByteBuffer buffer, String s)
/*     */   {
/* 444 */     long current = 0L;
/* 445 */     int n = 0;
/*     */     
/* 447 */     byte[] array = buffer.array();
/* 448 */     int p = buffer.arrayOffset() + buffer.position();
/*     */     
/* 450 */     int len = s.length();
/* 451 */     for (int i = 0; i < len; i++)
/*     */     {
/* 453 */       char c = s.charAt(i);
/* 454 */       if ((c >= '') || (c < ' '))
/* 455 */         throw new IllegalArgumentException();
/* 456 */       int code = table[c][0];
/* 457 */       int bits = table[c][1];
/*     */       
/* 459 */       current <<= bits;
/* 460 */       current |= code;
/* 461 */       n += bits;
/*     */       
/* 463 */       while (n >= 8)
/*     */       {
/* 465 */         n -= 8;
/* 466 */         array[(p++)] = ((byte)(int)(current >> n));
/*     */       }
/*     */     }
/*     */     
/* 470 */     if (n > 0)
/*     */     {
/* 472 */       current <<= 8 - n;
/* 473 */       current |= 255 >>> n;
/* 474 */       array[(p++)] = ((byte)(int)current);
/*     */     }
/*     */     
/* 477 */     buffer.position(p - buffer.arrayOffset());
/*     */   }
/*     */ }


/* Location:              E:\BaiduYunDownload\伊萨时期的一些代码\SparkEngine终极版\jars\YISAEngineBySpark2-4.0.6-SNAPSHOT-jar-with-dependencies.jar!\com\facebook\presto\jdbc\internal\jetty\http2\hpack\Huffman.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       0.7.1
 */